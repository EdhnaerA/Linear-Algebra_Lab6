# -*- coding: utf-8 -*-
"""LinAlg_Lab 6_Arcera.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bchP2vaENRwIsacsH6F-uL4MduTZ4PlI

# **Arcera, Edhnaer**
## Laboratory 6 : Matrices

# Task 1

Create a function named `mat_desc()` that througouhly describes a matrix, it should: <br>
1. Displays the shape, size, and rank of the matrix. <br>
2. Displays whether the matrix is square or non-square. <br>
3. Displays whether the matrix is an empty matrix. <br>
4. Displays if the matrix is an identity, ones, or zeros matrix <br>
   
Use 5 sample matrices in which their shapes are not lower than $(3,3)$.
In your methodology, create a flowchart discuss the functions and methods you have done. Present your results in the results section showing the description of each matrix you have declared.
"""

import numpy as np
E = np.zeros([4, 4])
D = np.ones([5, 5])
H = np.identity(3)
A = np.array([[3, 9, 6],[3, 2, 7],[3, 2, 1]])
R = np.array([[5, 8, 4], [2, 1, 5], [6, 4, 7]])


def describe_mat(matrix):
    if matrix.size > 0:
        is_square = True if matrix.shape[0] == matrix.shape[1] else False
        print(
            f'Matrix:\n{matrix}\n\nShape:\t{matrix.shape}\nSize: \t{matrix.size}\nRank:\t{matrix.ndim}\nIs Square: {is_square}')
        
        Sum = sum(matrix)
        sums = sum(Sum)
        diag = np.diagonal(matrix)
        result = 1
        for x in diag:
            result = result * x
        if sums == 0:
            print("Zero:", True)
            print("Ones:", False)
            print('Identity:', False)
        elif sums == matrix.size:
            print("Zero:", False)
            print("Ones:", True)
            print('Identity:', False)
        elif result == 1:
            print("Zero:", False)
            print("Ones:", False)
            print('Identity:',True)
        else:
            print("Zero:", False)
            print("Ones:", False)
            print('Identity:', False)
    else:
        print('Matrix is Null')

describe_mat(E)
print("~" * 60)
describe_mat(D)
print("~" * 60)
describe_mat(H)
print("~" * 60)
describe_mat(A)
print("~" * 60)
describe_mat(R)
print("~" * 60)

"""# Task 2

Create a function named `mat_operations()` that takes in two matrices or scalars a input parameters it should:<br>
 1. Display the description of each matrix, if the parameter is a scalar it tells that it is a scalar rather than describing it as a matrix.
 2. Determines if the matrices are viable for operation and returns your own error message if they are not viable.
 3. Returns the sum of the matrices.
 4. Returns the differen of the matrices.
 5. Returns the element-wise multiplication of the matrices.
 6. Returns the element-wise division of the matrices.

Use 5 sample matrices in which their shapes are not lower than $(3,3)$.
In your methodology, create a flowchart discuss the functions and methods you have done. Present your results in the results section showing the description of each matrix you have declared.

$$H = 
\begin{bmatrix}1&2&7\\1&9&9\\8&6&9
\end{bmatrix}$$

$$E = 
\begin{bmatrix}3&3&3\\9&6&4\\1&7&7
\end{bmatrix}$$
    \begin{array}\\
        L = -3
    \end{array}
$$Y = 
\begin{bmatrix}6&6&6\\1&5&4\\5&6&2
\end{bmatrix}$$
\begin{array}\\
        N = 5
    \end{array}
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.linalg as la
H = np.array([[1, 2, 7], [1, 9, 9], [8, 6, 9]])
E = np.array([[3, 3, 3], [9, 6, 4], [1, 7, 7]])
L = -3
Y = np.array([[6,6, 6], [1, 5, 4], [5, 6, 2]])
N = 5

mat_operations(H, E)
print("-" * 64)
mat_operations(H, L)
print("-" * 64)
mat_operations(H, Y)
print("-" * 64)
mat_operations(L, N)
print("-" * 64)

def mat_operations(matrix1, matrix2):
    if np.isscalar(matrix1) == True and np.isscalar(matrix2) == True:
        print(matrix1, 'Is a scalar')
        print(matrix2, 'Is a scalar')
        print('---------------------------------------')

    elif np.isscalar(matrix1) == True:
        print(matrix1,'Is a scalar')
        print('---------------------------------------')
        if matrix2.size > 0:
            is_square = True if matrix2.shape[0] == matrix2.shape[1] else False
            print(f'Matrix:\n{matrix2}\n\nShape:\t{matrix2.shape}\nSize: \t{matrix2.size}\nRank:\t{matrix2.ndim}\nSquare: {is_square}\n',
                  f'---------------------------------------')
        else:
            print('Matrix is Null')

    elif np.isscalar(matrix2)==True:
        print(matrix2,'Is a scalar')
        print('---------------------------------------')
        if matrix1.size > 0:
            is_square = True if matrix1.shape[0] == matrix1.shape[1] else False
            print(f'Matrix:\n{matrix1}\n\nShape:\t{matrix1.shape}\nSize: \t{matrix1.size}\nRank:\t{matrix1.ndim}\nSquare: {is_square}\n',
                  f'---------------------------------------')
        else:
            print('Matrix is Null')

    elif np.isscalar(matrix1) == False and np.isscalar(matrix2) == False:
        if matrix1.size > 0 and matrix2.size > 0:
            is_square = True if matrix1.shape[0] == matrix1.shape[1] else False
            print(f'Matrix:\n{matrix1}\n\nShape:\t{matrix1.shape}\nSize: \t{matrix1.size}\nRank:\t{matrix1.ndim}\nSquare: {is_square}\n',
                  f'---------------------------------------')
            
            is_square = True if matrix2.shape[0] == matrix2.shape[1] else False
            print(f'Matrix:\n{matrix2}\n\nShape:\t{matrix2.shape}\nSize: \t{matrix2.size}\nRank:\t{matrix2.ndim}\nSquare: {is_square}\n',
                  f'---------------------------------------')
        else:
            print('Matrix is Null')

    if np.isscalar(matrix1)==True:
        addition = matrix1 + matrix2
        substraction = matrix1 - matrix2
        multiplication = matrix1 * matrix2
        division = matrix1 / matrix2
        print("sum of\n", matrix1, "\n and\n", matrix2, "\n is", addition)
        print('---------------------------------------')
        print("difference of\n", matrix1, "\n and\n", matrix2, "\n is", substraction)
        print('---------------------------------------')
        print("product of\n", matrix1, "\n and\n", matrix2, "\n is", multiplication)
        print('---------------------------------------')
        print("qoutient of\n", matrix1, "\n and\n", matrix2, "\n is", division)
        print('---------------------------------------')

    elif np.isscalar(matrix2) == True:
        addition = matrix1 + matrix2
        substraction = matrix1 - matrix2
        multiplication = matrix1 * matrix2
        division = matrix1 / matrix2
        print("sum of\n", matrix1, "\n and\n", matrix2,"\n is", addition)
        print('---------------------------------------')
        print("difference of\n", matrix1, "\n and\n", matrix2,"\n is",substraction)
        print('---------------------------------------')
        print("product of\n", matrix1, "\n and\n", matrix2,"\n is", multiplication)
        print('---------------------------------------')
        print("qoutient of\n", matrix1, "\n and\n", matrix2,"\n is", division)
        print('---------------------------------------')

    elif matrix1.size == matrix2.size :
        addition = matrix1 + matrix2
        substraction = matrix1 - matrix2
        multiplication = matrix1 * matrix2
        division = matrix1 / matrix2
        print("sum of\n", matrix1, "\n and\n", matrix2, "\n is", addition)
        print('---------------------------------------')
        print("difference of\n", matrix1, "\n and\n", matrix2, "\n is", substraction)
        print('---------------------------------------')
        print("product of\n", matrix1, "\n and\n", matrix2, "\n is", multiplication)
        print('---------------------------------------')
        print("qoutient of\n", matrix1, "\n and\n", matrix2, "\n is", division)
        print('---------------------------------------')

    else:
            print("Cannot perfrom operations due to unequal matrix size")